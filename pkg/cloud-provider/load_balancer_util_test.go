package cloud_provider

import (
	"context"
	"fmt"
	"testing"

	"icode.baidu.com/baidu/jpaas-caas/bce-sdk-go/bce"
	"icode.baidu.com/baidu/jpaas-caas/bce-sdk-go/blb"
	cce "icode.baidu.com/baidu/jpaas-caas/cloud-provider-baiducloud/pkg/temp-cce"
	api "k8s.io/api/core/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func beforeTestBlb() (*Baiducloud, *cce.ListClusterNodesResponse, *blb.CreateLoadBalancerResponse, error) {
	ctx := context.Background()
	// create vpc subnet cluster
	cloud, nodesRes, err := newCluster()
	if err != nil {
		return nil, nil, nil, err
	}
	// create service
	svc := buildService()
	// create LB
	blbName := getBlbName(nodesRes.Nodes[0].ClusterID, svc)
	// according to blb api doc, limit to 65
	if len(blbName) > 65 {
		blbName = blbName[:65]
	}
	fmt.Printf("blbName:%s", blbName)
	args := blb.CreateLoadBalancerArgs{
		Name:     blbName,
		VpcID:    nodesRes.Nodes[0].VPCID,
		SubnetID: nodesRes.Nodes[0].SubnetID,
		Desc:     "auto generated by cce:" + nodesRes.Nodes[0].ClusterID,
	}
	fmt.Printf("args:%v", args)
	respBlb, err := cloud.clientSet.BLBClient.CreateLoadBalancer(ctx, &args, &bce.SignOption{
		CustomSignFunc: CCEServiceSign,
	})
	fmt.Printf("respBlb:%v", respBlb)
	if err != nil {
		return nil, nil, nil, err
	}
	if len(respBlb.LoadBalancerId) == 0 || respBlb.Address == "" ||
		respBlb.Name == "" {
		return nil, nil, nil, fmt.Errorf("CreateLoadBalancer err, get respBlb %v", respBlb)
	}
	return cloud, nodesRes, respBlb, nil
}

func TestGetBCELoadBalancer(t *testing.T) {
	cloud, _, _, err := beforeTestBlb()
	if err != nil {
		t.Errorf("beforeTestBlb err , %v", err)
	}
	ctx := context.Background()
	cases := []string{
		"test",
		"test11",
		"",
		"test/test/wdaw",
	}
	for _, c := range cases {
		lb, exist, err := cloud.getBLBByName(ctx, c)
		if err == nil || exist {
			t.Errorf("getBLBByName err, there should be a err, lb: %v, exist: %v, err: %v", lb, exist, err)
		}
	}

}

func TestGetBCELoadBalancerByID(t *testing.T) {
	cloud, _, resp, err := beforeTestBlb()
	if err != nil {
		t.Errorf("beforeTestBlb err , %v", err)
	}
	ctx := context.Background()
	cases := []string{
		"test",
		"test11",
		"",
		"lb-111111",
	}
	for _, c := range cases {
		lb, exist, err := cloud.getBLBByID(ctx, c)
		if err == nil || exist {
			t.Errorf("getBLBByName err, there should be a err, lb: %v, exist: %v, err: %v", lb, exist, err)
		}
	}
	cases = []string{
		resp.LoadBalancerId,
	}
	for _, c := range cases {
		lb, exist, err := cloud.getBLBByID(ctx, c)
		if err != nil || !exist {
			t.Errorf("getBLBByName err, lb: %v, exist: %v, err: %v", lb, exist, err)
		}
	}
}

func TestValidateService(t *testing.T) {
	cloud, _, _, err := beforeTestBlb()
	if err != nil {
		t.Errorf("beforeTestBlb err , %v", err)
	}
	case1 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{
			Ports: []api.ServicePort{
				{
					Name:     "test",
					Port:     1,
					Protocol: "TCP",
				},
			},
		},
	}
	case2 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo2",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{
			Ports: []api.ServicePort{
				{
					Name:     "test",
					Port:     1,
					Protocol: "UDP",
				},
			},
		},
	}
	case3 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{},
	}
	case4 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo2",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{
			Ports: []api.ServicePort{
				{
					Name:     "test",
					Port:     1,
					Protocol: "HTTP",
				},
			},
		},
	}
	case5 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo2",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{
			Ports: []api.ServicePort{
				{
					Name:     "test",
					Port:     1,
					Protocol: "HTTPS",
				},
			},
		},
	}
	case6 := &api.Service{
		ObjectMeta: meta_v1.ObjectMeta{
			Name:      "foo2",
			Namespace: api.NamespaceDefault,
		},
		Spec: api.ServiceSpec{
			Ports: []api.ServicePort{
				{
					Name:     "test",
					Port:     1,
					Protocol: "DAD",
				},
			},
		},
	}
	err = cloud.validateService(case1)
	if err != nil {
		t.Errorf("validateService err, err: %v", err)
	}
	err = cloud.validateService(case2)
	if err != nil {
		t.Errorf("validateService err, err: %v", err)
	}
	err = cloud.validateService(case3)
	if err == nil {
		t.Errorf("validateService err, there should be err, err is nil")
	}
	err = cloud.validateService(case4)
	if err == nil {
		t.Errorf("validateService err, there should be err, err is nil")
	}
	err = cloud.validateService(case5)
	if err == nil {
		t.Errorf("validateService err, there should be err, err is nil")
	}
	err = cloud.validateService(case6)
	if err == nil {
		t.Errorf("validateService err, there should be err, err is nil")
	}
}
